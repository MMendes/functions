Understanding Getters and Setters can be complex at first. But once you understand that they allow a 
dynamic form of accessing and setting the values of Object properties, things fall into place.

As we know, an object property is a name/value pair,and a set of attributes (value, writable, enumerable, configurable).
In ECMAScript5 the value may be replaced by one or two methods, known as a getter and a setter. Properties defined as
getters and setter are sometimes known as accessor properties to distinguish them from the regular data properties that 
have a simple value.

When a program queries the value of an accessor property, JavaScript invokes the getter method(passing no arguments)
and then returns the value of the property access expression, which is the same as saying, that the returned value is
the value of the property you queried. 

When a program sets the value of an accesor property, JS invokes the setter method, passing the value of the right-hand
side of the assigment. This method is responsible for "setting", in some sense, the property value. The return value
of the setter method is ignored.

This will become clear with a simple example:

var o = {                   //set Object o and define its properties a,b,c
  a: 8,                     //a is set to value 8
  get b () {                //b is set using the getter method which 
    return this.a+2;        //will be defined as "a"+2 => 10
  },
  set c(x) {                //c will set the a new value for a when the value for c is defined
    this.a = x/2;           //the new value of a will be half of the value of c
  }
};

                            //accessing the property values in o we will get the following
o.a => 8
o.b => 10
o.c = 50;                   //we have defined the value of c as 50

o.a => 25                   //a in now set to 25 ( half the value of c => 50/2)



Here is a nother example:

//This object generates strictly increasing serial numbers
var serialnum = {
    //This data property hold the next serial number
    //The $ in the property name hints it's a private property
    $n: 0,
    
    //return the current value and increment it
    get next() {
        return this.$n++;
    },
    
    //set a new value for n, but only if it's larger than current
    set next(n) {
        if (n>= this.$n) this.$n = n;
        //throw and error message if n is not larger than current
        else throw "Serial number can only be set to a larger value";
    },
};

//set the value of n to 2
serialnum.next = 2;  => 2

//set the value of n to 3
serialnum.next = 3;  => 3

//set the value of n to 1. This is decreasing the valur from 3. It will, as expected, throw an error
serialnum.next = 1;  => Serial number can only be set to a larger value
