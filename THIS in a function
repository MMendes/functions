I know that some(many) of you might look at this as something so basic it doesn't warrant much attention. 
But for those, like myself, who are just getting started with JavaScript and are still trying to master the basics,
my little contribution here is a major point in understanding the use of the "this" keyword in fucntions, and what made me
finally understand, after having read several books on JavaScript, how to use "this" in functions.

Check out this link for a full detail and indepth explanantion of "this":

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this

The use of "this" becomes particularly usefull when using nested fucntions. 

As we all know, "this" refers to the context in which the function was invoked. Thus if a fucntion is a method of an
object, then the value of "this" is the oject the function was invoked on. If a nested fucntion is invoked as a fucntion
the its "this" value will either be the global object (non-strict mode) or UNDEFINED (strict mode).

What I was missing in understanding how to properly use the "this" keyword was that to access the invocation context of
the outer fucntion, you have to assign "this" to a variable.
Don't worry if you also failed to get this the first time around. It is a comomom mistake to assume that a nested fucntion
invoked as a function can use "this" to obtain the invocation context of the outer function.
If you do not store its value in a varibale, you will access the global object context, which s not what you want!

According to "JavaScript The Definitive Guide" by David Flanagan, and using the example in the book, a commom variable 
"self" is used for this purpose.

For example:

var O = {
  m: function () {              //Method m of the object
    var self = this;            //save the "this value in a variable named "self"
    console.log(this === O);    //Prints "true": "this" is the object O
    f();                        //Now call the helper function
    
    fucntion f() {              //A nested function f
      console.log(this === O);  //"false": "this is global or underfined
      console.log(self === O);  //"true": "self" is the outer "this" value
      }
    }
  };
  O.m();                        //invoke the method m on the object O
